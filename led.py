from micropython import opt_levelprint('{} opt_level: {}'.format(__name__, opt_level()))from machine import Pin# noinspection PyUnresolvedReferencesfrom time import ticks_ms, ticks_diff# noinspection PyUnresolvedReferences,PyArgumentListclass Led:    DEFAULT_PULSE_WIDTH = 1000    STATE_OFF = 0    STATE_ON = 1    STATE_TOGGLE = 2    def __init__(self, pin, on_level, verbose=0):        self.verbose = verbose        self.pulse_width = Led.DEFAULT_PULSE_WIDTH        self.state = None        self.start = None        self.gpio_pin = pin        self.on_level = on_level        self.pin = Pin(self.gpio_pin, Pin.OUT)        self.off(poll=True)    def __repr__(self):        return '<Led: On pin {} at {:x}>'.format(self.gpio_pin, id(self))    def poll(self):        if self.state == Led.STATE_OFF:            if self.pin.value() == self.on_level:                self.pin.value(not self.on_level)        elif self.state == Led.STATE_ON:            if self.pin.value() != self.on_level:                self.pin.value(self.on_level)        elif self.state == Led.STATE_TOGGLE:            if self.start is None:                self.start = ticks_ms()            else:                ticked = ticks_ms()                if ticks_diff(ticked, self.start) >= self.pulse_width:                    self.pin.value(not self.pin.value())                    self.start = ticked    def off(self, poll=False):        self.start = None        self.state = Led.STATE_OFF        if poll:            self.poll()    def on(self, poll=False):        self.start = None        self.state = Led.STATE_ON        if poll:            self.poll()    def toggle(self, pulse_width=None):        if self.state != Led.STATE_TOGGLE:            self.state = Led.STATE_TOGGLE            self.start = None        if pulse_width and pulse_width != self.pulse_width:            self.pulse_width = pulse_width    def close(self):        self.off(poll=True)class MockLed:    def __init__(self):        pass    def __repr__(self):        return '<MockLed at {:x}>'.format(id(self))    def poll(self):        pass    def off(self, poll=False):        pass    def on(self, poll=False):        pass    def toggle(self, pulse_width=None):        pass    def close(self):        pass